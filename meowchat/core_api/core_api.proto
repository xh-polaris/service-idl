syntax = "proto3";

package meowchat.core_api;

option go_package = "meowchat/core_api";
option java_package = "com.xhpolaris.idlgen.meowchat.coreapi";
option java_outer_classname = "CoreApiProto";
option java_multiple_files = true;

import "http/http.proto";

import "meowchat/core_api/agg.proto";
import "meowchat/core_api/sts.proto";
import "meowchat/core_api/user.proto";
import "meowchat/core_api/auth.proto";
import "meowchat/core_api/collection.proto";
import "meowchat/core_api/comment.proto";
import "meowchat/core_api/like.proto";
import "meowchat/core_api/moment.proto";
import "meowchat/core_api/post.proto";
import "meowchat/core_api/system.proto";
import "meowchat/core_api/plan.proto";

service sts {
  rpc ApplySignedUrl(ApplySignedUrlReq) returns (ApplySignedUrlResp){
    option (http.post) = "/sts/apply_signed_url";
  }
  rpc ApplySignedUrlAsCommunity(ApplySignedUrlAsCommunityReq) returns (ApplySignedUrlAsCommunityResp) {
    option (http.post) = "/sts/apply_signed_url_as_community";
  }
}

service user {
  rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoResp){
    option (http.get) = "/user/get_user_info";
  }
  rpc UpdateUserInfo(UpdateUserInfoReq) returns (UpdateUserInfoResp){
    option(http.post) = "/user/update_user_info";
  }
  rpc SearchUser(SearchUserReq) returns (SearchUserResp){
    option(http.get) = "/user/search_user";
  }
}

service auth {
  rpc SignIn (SignInReq) returns (SignInResp){
    option (http.post) = "/auth/sign_in";
  }
  rpc SendVerifyCode(SendVerifyCodeReq) returns (SendVerifyCodeResp){
    option (http.post) = "/auth/send_verify_code";
  }
  rpc SetPassword(SetPasswordReq) returns (SetPasswordResp){
    option(http.post) = "/auth/set_password";
  }
}

service collection {
  rpc GetCatPreviews (GetCatPreviewsReq) returns (GetCatPreviewsResp){
    option (http.get) = "/collection/get_cat_previews";
  }
  rpc GetCatDetail(GetCatDetailReq) returns (GetCatDetailResp){
    option(http.get) = "/collection/get_cat_detail";
  }
  rpc NewCat(NewCatReq) returns (NewCatResp){
    option(http.post) = "/collection/new_cat";
  }
  rpc DeleteCat(DeleteCatReq) returns (DeleteCatResp){
    option(http.post) = "/collection/delete_cat";
  }
  rpc SearchCat(SearchCatReq) returns (SearchCatResp){
    option(http.get) = "/collection/search_cat";
  }
  rpc CreateImage(CreateImageReq) returns (CreateImageResp){
    option(http.post) = "/collection/create_image";
  }
  rpc DeleteImage(DeleteImageReq) returns (DeleteImageResp){
    option(http.post) = "/collection/delete_image";
  }
  rpc GetImageByCat(GetImageByCatReq) returns (GetImageByCatResp){
    option(http.get) = "/collection/get_image_by_cat";
  }
}

service comment {
  rpc GetComments(GetCommentsReq) returns (GetCommentsResp){
    option(http.get) = "/comment/get_comments";
  }
  rpc NewComment(NewCommentReq) returns (NewCommentResp){
    option(http.post) = "/comment/new_comment";
  }
  rpc DeleteComment(DeleteCommentReq) returns (DeleteCommentResp){
    option(http.post) = "/comment/delete_comment";
  }
}

service like {
  rpc DoLike(DoLikeReq) returns (DoLikeResp){
    option(http.post) = "/like/do_like";
  }
  rpc GetUserLiked(GetUserLikedReq) returns (GetUserLikedResp){
    option(http.get) = "/like/get_user_liked";
  }
  rpc GetLikedCount(GetLikedCountReq) returns (GetLikedCountResp){
    option(http.get) = "/like/get_count";
  }
  rpc GetLikedUsers(GetLikedUsersReq) returns (GetLikedUsersResp){
    option(http.get) = "/like/get_liked_users";
  }
  rpc GetUserLikes(GetUserLikesReq) returns (GetUserLikesResp){
    option(http.get) = "/like/get_user_likes";
  }
}

service moment {
  rpc GetMomentPreviews(GetMomentPreviewsReq) returns (GetMomentPreviewsResp){
    option(http.get) = "/moment/get_moment_previews";
  }
  rpc GetMomentDetail(GetMomentDetailReq) returns (GetMomentDetailResp){
    option(http.get) = "/moment/get_moment_detail";
  }
  rpc NewMoment(NewMomentReq) returns (NewMomentResp){
    option(http.post) = "/moment/new_moment";
  }
  rpc DeleteMoment(DeleteMomentReq) returns (DeleteMomentResp){
    option(http.post) = "/moment/delete_moment";
  }
  rpc SearchMoment(SearchMomentReq) returns (SearchMomentResp){
    option(http.get) = "/moment/search_moment";
  }
}

service plan {
  rpc GetPlanPreviews(GetPlanPreviewsReq) returns (GetPlanPreviewsResp){
    option(http.get) = "/plan/get_plan_previews";
  }
  rpc GetPlanDetail(GetPlanDetailReq) returns (GetPlanDetailResp){
    option(http.get) = "/plan/get_plan_detail";
  }
  rpc NewPlan(NewPlanReq) returns (NewPlanResp){
    option(http.post) = "/plan/new_plan";
  }
  rpc DeletePlan(DeletePlanReq) returns (DeletePlanResp){
    option(http.post) = "/plan/delete_plan";
  }
  rpc DonateFish(DonateFishReq) returns (DonateFishResp){
    option(http.get) = "/plan/donate_fish";
  }
  rpc GetUserFish(GetUserFishReq) returns (GetUserFishResp){
    option(http.get) = "/plan/get_user_fish";
  }
  rpc ListFishByPlan(ListFishByPlanReq) returns (ListFishByPlanResp){
    option(http.get) = "/plan/list_fish_by_plan";
  }
}

service post {
  rpc GetPostPreviews(GetPostPreviewsReq) returns (GetPostPreviewsResp){
    option(http.post) = "/post/get_post_previews";
  }
  rpc GetPostDetail(GetPostDetailReq) returns (GetPostDetailResp){
    option(http.get) = "/post/get_post_detail";
  }
  rpc NewPost(NewPostReq) returns (NewPostResp){
    option(http.post) = "/post/new_post";
  }
  rpc DeletePost(DeletePostReq) returns (DeletePostResp){
    option(http.post) = "/post/delete_post";
  }
  rpc SetOfficial(SetOfficialReq) returns (SetOfficialResp){
    option(http.post) = "/post/set_official";
  }
}

service system {
  // admin
  rpc GetAdmins (GetAdminsReq) returns (GetAdminsResp){
    option(http.get) = "/notice/get_admins";
  }
  rpc NewAdmin(NewAdminReq) returns (NewAdminResp) {
    option(http.post) = "/notice/new_admin";
  }
  rpc DeleteAdmin(DeleteAdminReq) returns (DeleteAdminResp) {
    option(http.post) = "/notice/delete_admin";
  }
  // news
  rpc GetNews(GetNewsReq) returns (GetNewsResp) {
    option(http.get) = "/notice/get_news";
  }
  rpc NewNews(NewNewsReq) returns (NewNewsResp) {
    option(http.post) = "/notice/new_news";
  }
  rpc DeleteNews(DeleteNewsReq) returns (DeleteNewsResp) {
    option(http.post) = "/notice/remove_news";
  }
  // system
  rpc GetNotices(GetNoticesReq) returns (GetNoticesResp) {
    option(http.get) = "/notice/get_notices";
  }
  rpc NewNotice(NewNoticeReq) returns (NewNoticeResp) {
    option(http.post) = "/notice/new_notice";
  }
  rpc DeleteNotice(DeleteNoticeReq) returns (DeleteNoticeResp) {
    option(http.post) = "/notice/remove_notice";
  }
  // community
  rpc ListCommunity(ListCommunityReq) returns (ListCommunityResp) {
    option(http.get) = "/community/list_community";
  }
  rpc NewCommunity(NewCommunityReq) returns (NewCommunityResp) {
    option(http.post) = "/community/new_community";
  }
  rpc DeleteCommunity(DeleteCommunityReq) returns (DeleteCommunityResp) {
    option(http.post) = "/community/delete_community";
  }
  // role
  rpc GetUserRoles(GetUserRolesReq) returns (GetUserRolesResp) {
    option(http.get) = "/role/get_user_roles";
  }
  rpc UpdateCommunityAdmin(UpdateCommunityAdminReq) returns (UpdateCommunityAdminResp) {
    option(http.post) = "/role/update_community_admin";
  }
  rpc UpdateSuperAdmin(UpdateSuperAdminReq) returns (UpdateSuperAdminResp) {
    option(http.post) = "/role/update_super_admin";
  }
  rpc GetUserByRole(GetUserByRoleReq) returns (GetUserByRoleResp) {
    option(http.get) = "/role/get_user_by_role";
  }
  rpc UpdateRole(UpdateRoleReq) returns (UpdateRoleResp) {
    option(http.post) = "/role/update_role";
  }
  rpc ListApply(ListApplyReq) returns (ListApplyResp) {
    option(http.get) = "/role/list_apply";
  }
  rpc HandleApply(HandleApplyReq) returns (HandleApplyResp) {
    option(http.post) = "/role/handle_apply";
  }
  rpc CreateApply(CreateApplyReq) returns (CreateApplyResp) {
    option(http.post) = "/role/create_apply";
  }

  //notification
  rpc ListNotification(ListNotificationReq) returns (ListNotificationResp) {
    option(http.get) = "/notification/list_notification";
  }
  rpc CleanNotification(CleanNotificationReq) returns (CleanNotificationResp) {
    option(http.get) = "/notification/clean_notification";
  }
  rpc CountNotification(CountNotificationReq) returns (CountNotificationResp) {
    option(http.get) = "/notification/count_notification";
  }

  rpc Prefetch(PrefetchReq) returns (PrefetchResp) {
    option(http.get) = "/prefetch";
  }

}

